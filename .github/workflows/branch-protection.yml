name: Branch Protection Check

on:
    pull_request:
        branches: [master, main]

jobs:
    enforce-branch-protection:
        name: Enforce Branch Protection Rules
        runs-on: ubuntu-latest

        steps:
            - name: Check PR source branch
              run: |
                  echo "Source branch: ${{ github.head_ref }}"
                  echo "Target branch: ${{ github.base_ref }}"

                  # Ensure PR is coming from a feature branch, not master/main
                  if [[ "${{ github.head_ref }}" == "master" || "${{ github.head_ref }}" == "main" ]]; then
                    echo "‚ùå Direct pushes to master/main are not allowed!"
                    echo "Please create a feature branch and submit a pull request."
                    exit 1
                  fi

                  # Ensure proper branch naming convention
                  if [[ ! "${{ github.head_ref }}" =~ ^(feature|bugfix|hotfix|docs)\/[a-zA-Z0-9\-_]+$ ]]; then
                    echo "‚ö†Ô∏è  Branch name doesn't follow convention: feature/, bugfix/, hotfix/, or docs/"
                    echo "Current branch: ${{ github.head_ref }}"
                    echo "Please rename your branch to follow the naming convention."
                    # Note: This is a warning, not a failure - adjust as needed
                  fi

            - name: Check commit message format
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0  # Fetch full history to ensure we have access to base and head commits

            - name: Validate commit messages
              run: |
                  # Get the commit messages in this PR
                  echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
                  echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
                  
                  # Fetch the base branch to ensure we have the commits
                  git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }} || true
                  
                  # Check if both SHAs exist in the repository
                  if ! git cat-file -e ${{ github.event.pull_request.base.sha }}^{commit} 2>/dev/null; then
                    echo "‚ùå Base commit not found: ${{ github.event.pull_request.base.sha }}"
                    echo "Trying alternative method..."
                    # Alternative: use merge-base to find common ancestor
                    BASE_COMMIT=$(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD 2>/dev/null || echo "${{ github.event.pull_request.base.sha }}")
                    echo "Using base commit: $BASE_COMMIT"
                  else
                    BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
                  fi
                  
                  if ! git cat-file -e ${{ github.event.pull_request.head.sha }}^{commit} 2>/dev/null; then
                    echo "‚ùå Head commit not found: ${{ github.event.pull_request.head.sha }}"
                    echo "Using HEAD instead"
                    HEAD_COMMIT="HEAD"
                  else
                    HEAD_COMMIT="${{ github.event.pull_request.head.sha }}"
                  fi
                  
                  # Get the commit messages in this PR
                  echo "Getting commits between $BASE_COMMIT and $HEAD_COMMIT"
                  git log --format=%s $BASE_COMMIT..$HEAD_COMMIT > commit_messages.txt || {
                    echo "‚ùå Failed to get commit range, trying alternative approach"
                    # Fallback: get commits from the current branch only
                    git log --format=%s HEAD~${{ github.event.pull_request.commits }}..HEAD > commit_messages.txt 2>/dev/null || {
                      echo "‚ö†Ô∏è  Could not retrieve commit messages, skipping validation"
                      exit 0
                    }
                  }

                  # Check if we have any commits to validate
                  if [ ! -s commit_messages.txt ]; then
                    echo "‚ÑπÔ∏è  No commits found in this PR range"
                    exit 0
                  fi

                  echo "Found $(wc -l < commit_messages.txt) commit(s) to validate"

                  # Check each commit message
                  while IFS= read -r message; do
                    echo "Checking commit: $message"
                    
                    # Check if commit message follows conventional commits format
                    # Pattern: type(scope): description or type: description
                    if [[ "$message" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\([^)]+\))?:\ .+ ]]; then
                      echo "‚úÖ Commit message format is valid: $message"
                    else
                      echo "‚ö†Ô∏è  Commit message doesn't follow conventional format: $message"
                      echo "Expected format: type(scope): description"
                      echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build"
                      echo "Examples: 'feat(auth): add login functionality' or 'fix: resolve database connection issue'"
                    fi
                  done < commit_messages.txt

            - name: Summary
              run: |
                  echo "‚úÖ Branch protection checks completed"
                  echo "üìã Summary:"
                  echo "  - Source branch: ${{ github.head_ref }}"
                  echo "  - Target branch: ${{ github.base_ref }}"
                  echo "  - Pull request title: ${{ github.event.pull_request.title }}"
