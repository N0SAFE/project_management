name: CD Pipeline - Deploy to Production

on:
    push:
        branches: [master, main]
    workflow_run:
        workflows: ["CI Pipeline"]
        types:
            - completed
        branches: [master, main]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME_API: ${{ github.repository }}/api
    IMAGE_NAME_WEB: ${{ github.repository }}/web

jobs:
    # Only run if CI passed
    check-ci-status:
        name: Check CI Status
        runs-on: ubuntu-latest
        if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

        steps:
            - name: CI Status Check
              run: echo "CI pipeline passed, proceeding with deployment"

    # Build and push Docker images
    build-and-push:
        name: Build & Push Docker Images
        runs-on: ubuntu-latest
        needs: check-ci-status
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Extract metadata for API
              id: meta-api
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Extract metadata for Web
              id: meta-web
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push API Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./apps/api
                  file: ./apps/api/Dockerfile.prod
                  push: true
                  tags: ${{ steps.meta-api.outputs.tags }}
                  labels: ${{ steps.meta-api.outputs.labels }}
                  build-args: |
                      DB_URL=jdbc:mysql://mysql:3306/mydatabase
                      DB_USERNAME=root
                      DB_PASSWORD=verysecret
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push Web Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ./apps/web
                  file: ./apps/web/Dockerfile.prod
                  push: true
                  tags: ${{ steps.meta-web.outputs.tags }}
                  labels: ${{ steps.meta-web.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    # Deploy to staging environment
    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: build-and-push
        environment: staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to staging
              run: |
                  echo "Deploying to staging environment..."
                  # Here you would add your staging deployment script
                  # For example, deploy to a staging server, K8s cluster, etc.

                  # Example with docker compose (if deploying to a staging server):
                  # scp docker-compose.prod.yaml user@staging-server:/path/to/deployment/
                  # ssh user@staging-server "cd /path/to/deployment && docker compose -f docker-compose.prod.yaml pull && docker compose -f docker-compose.prod.yaml up -d"

            - name: Run smoke tests on staging
              run: |
                  echo "Running smoke tests on staging..."
                  # Add your staging smoke tests here
                  # curl --fail https://staging.yourapp.com/health || exit 1

    # Deploy to production (requires manual approval)
    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: deploy-staging
        environment: production

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Deploy to production
              run: |
                  echo "Deploying to production environment..."
                  # Here you would add your production deployment script
                  # This step requires manual approval due to the 'production' environment

            - name: Run production smoke tests
              run: |
                  echo "Running smoke tests on production..."
                  # Add your production smoke tests here
                  # curl --fail https://yourapp.com/health || exit 1

            - name: Notify deployment success
              if: success()
              run: |
                  echo "Production deployment successful!"
                  # Add notification logic (Slack, email, etc.)

            - name: Rollback on failure
              if: failure()
              run: |
                  echo "Deployment failed, initiating rollback..."
                  # Add rollback logic here
