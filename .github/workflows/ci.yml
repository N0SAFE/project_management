name: CI Pipeline

on:
    push:
        branches: [develop, feature/*, bugfix/*, hotfix/*]
    pull_request:
        branches: [master, main, develop]

jobs:
    # Job 1: API Tests (Spring Boot)
    api-tests:
        name: API Tests & Build
        runs-on: ubuntu-latest

        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: verysecret
                    MYSQL_DATABASE: mydatabase
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping -h localhost"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            - name: Wait for MySQL to be ready
              run: |
                  until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -pverysecret --silent; do
                    echo 'Waiting for MySQL...'
                    sleep 2
                  done
                  echo 'MySQL is ready!'

            - name: Make Maven wrapper executable
              working-directory: ./apps/api
              run: chmod +x mvnw

            - name: Run API tests
              working-directory: ./apps/api
              run: ./mvnw clean test
              env:
                  DB_URL: jdbc:mysql://localhost:3306/mydatabase
                  DB_USERNAME: root
                  DB_PASSWORD: verysecret

            - name: Build API
              working-directory: ./apps/api
              run: ./mvnw clean package -DskipTests
              env:
                  DB_URL: jdbc:mysql://localhost:3306/mydatabase
                  DB_USERNAME: root
                  DB_PASSWORD: verysecret

            - name: Upload API test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: api-test-results
                  path: apps/api/target/surefire-reports/

            - name: Upload API build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: api-jar
                  path: apps/api/target/*.jar

    # Job 2: Web Tests (Angular)
    web-tests:
        name: Web Tests & Build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: apps/web/package-lock.json

            - name: Install dependencies
              working-directory: ./apps/web
              run: npm ci

            - name: Run linting
              working-directory: ./apps/web
              run: npm run lint || true # Don't fail on lint warnings in CI

            - name: Run unit tests
              working-directory: ./apps/web
              run: npm run test

            - name: Build application
              working-directory: ./apps/web
              run: npm run build -- --configuration=production

            - name: Upload web test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: web-test-results
                  path: apps/web/coverage/

            - name: Upload web build artifact
              uses: actions/upload-artifact@v4
              with:
                  name: web-dist
                  path: apps/web/dist/

    # Job 3: Integration Tests (Docker Compose)
    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: [api-tests, web-tests]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Create environment file for integration tests
              run: |
                  # Create .env file with integration test values
                  cat > .env << EOF
                  NODE_ENV=test

                  # Database Configuration
                  MYSQL_DATABASE=mydatabase
                  MYSQL_ROOT_PASSWORD=verysecret
                  DB_USERNAME=root
                  DB_PASSWORD=verysecret

                  # Application Configuration
                  DOCKER_COMPOSE_ENABLED=false

                  # Email Configuration (Test values)
                  MAIL_HOST=smtp.gmail.com
                  MAIL_PORT=587
                  MAIL_USERNAME=test@example.com
                  MAIL_PASSWORD=test_password
                  APP_MAIL_FROM=test@example.com
                  APP_MAIL_NAME=Test Application

                  # Node.js/Angular Configuration
                  API_URL=http://api:8080/api
                  CHOKIDAR_USEPOLLING=true
                  WATCHPACK_POLLING=true
                  NG_CLI_ANALYTICS=false
                  EOF
                  
                  echo "Created .env file for integration tests"

            - name: Build and test with Docker Compose
              run: |
                  # Build all services
                  docker compose -f docker-compose.yaml build

                  # Start services
                  docker compose -f docker-compose.yaml up

                  # Show running containers for debugging
                  echo "Running containers:"
                  docker ps

                  # Wait for MySQL to be healthy
                  echo "Waiting for MySQL to be healthy..."
                  timeout 300 bash -c 'until docker compose -f docker-compose.yaml ps mysql | grep -q "healthy"; do echo "Waiting for MySQL..."; sleep 10; done'

                  # Wait for API to be healthy
                  echo "Waiting for API to be healthy..."
                  timeout 300 bash -c 'until docker compose -f docker-compose.yaml ps api | grep -q "healthy"; do echo "Waiting for API..."; sleep 10; done'

                  # Additional direct connectivity test for API
                  echo "Testing direct API connectivity..."
                  timeout 120 bash -c 'until curl -s http://localhost:8080/actuator/health > /dev/null; do echo "Testing API connection..."; sleep 5; done'

                  # Wait for Web service to respond
                  echo "Waiting for Web service to respond..."
                  timeout 120 bash -c 'until curl -s http://localhost:4200 > /dev/null; do echo "Waiting for Web..."; sleep 5; done'

                  # Show service status for debugging
                  echo "=== Service Status ==="
                  docker compose -f docker-compose.yaml ps

                  # Test API health endpoint
                  echo "Testing API health endpoint..."
                  curl --fail --max-time 10 -v http://localhost:8080/actuator/health || {
                    echo "API health check failed. Debugging info:"
                    echo "=== Port listening ==="
                    netstat -tlnp | grep 8080 || echo "No process listening on port 8080"
                    echo "=== API Container logs ==="
                    docker compose -f docker-compose.yaml logs api --tail=100
                    exit 1
                  }

                  # Test Web application
                  echo "Testing Web application..."
                  curl --fail --max-time 10 -v http://localhost:4200 || {
                    echo "Web app check failed. Debugging info:"
                    echo "=== Port listening ==="
                    netstat -tlnp | grep 4200 || echo "No process listening on port 4200"
                    echo "=== Web Container logs ==="
                    docker compose -f docker-compose.yaml logs web --tail=50
                    exit 1
                  }

                  echo "Integration tests passed!"

            - name: Cleanup
              if: always()
              run: |
                  docker compose -f docker-compose.yaml down -v
                  # Remove test environment file
                  rm -f .env

    # Job 4: Security Scan
    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # Job 5: Code Quality
    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 21 for SonarQube
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Cache SonarQube packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            - name: Cache Maven dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

        # Note: You'll need to set up SonarQube/SonarCloud and add SONAR_TOKEN to GitHub secrets
        # - name: SonarQube Scan
        #   working-directory: ./apps/api
        #   run: ./mvnw sonar:sonar -Dsonar.projectKey=project-management -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
